name: Deploy Backend (Docker)

on:
  push:
    branches: [ master ]   # change to master if you use master
    paths:
      - '**'

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/communicate-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy on EC2 (pull & run)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            docker --version
            docker pull ${{ env.IMAGE_NAME }}:${{ github.sha }}
            docker stop ${{ secrets.APP_NAME }} || true
            docker rm ${{ secrets.APP_NAME }} || true
            docker run -d \
              --name ${{ secrets.APP_NAME }} \
              --restart unless-stopped \
              --env-file ${{ secrets.ENV_PATH }} \
              -p 4000:4000 \
              ${{ env.IMAGE_NAME }}:${{ github.sha }}
            docker image prune -f


      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/github-ec2-key
          chmod 600 ~/.ssh/github-ec2-key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/github-ec2-key ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            set e
            cd ${{ secrets.EC2_PATH }} 
            git pull origin master
            npm install --production
            echo "Building the project..."
            npm run build || echo "No build step"
            pm2 restart all || pm2 start app.js   # adjust command if needed
            pm2 save
          EOF
